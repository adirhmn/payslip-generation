// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	attendance "payslip-generation-system/internal/entity/attendance"
	payslip "payslip-generation-system/internal/entity/payslip"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAdminServiceProvider is a mock of AdminServiceProvider interface.
type MockAdminServiceProvider struct {
	ctrl     *gomock.Controller
	recorder *MockAdminServiceProviderMockRecorder
}

// MockAdminServiceProviderMockRecorder is the mock recorder for MockAdminServiceProvider.
type MockAdminServiceProviderMockRecorder struct {
	mock *MockAdminServiceProvider
}

// NewMockAdminServiceProvider creates a new mock instance.
func NewMockAdminServiceProvider(ctrl *gomock.Controller) *MockAdminServiceProvider {
	mock := &MockAdminServiceProvider{ctrl: ctrl}
	mock.recorder = &MockAdminServiceProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminServiceProvider) EXPECT() *MockAdminServiceProviderMockRecorder {
	return m.recorder
}

// AddPeriod mocks base method.
func (m *MockAdminServiceProvider) AddPeriod(ctx context.Context, attendancePeriod attendance.AttendancePeriod, userID, requestID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPeriod", ctx, attendancePeriod, userID, requestID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPeriod indicates an expected call of AddPeriod.
func (mr *MockAdminServiceProviderMockRecorder) AddPeriod(ctx, attendancePeriod, userID, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPeriod", reflect.TypeOf((*MockAdminServiceProvider)(nil).AddPeriod), ctx, attendancePeriod, userID, requestID)
}

// GetPayslipSummary mocks base method.
func (m *MockAdminServiceProvider) GetPayslipSummary(ctx context.Context, periodID int) (payslip.PayslipSummaryReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayslipSummary", ctx, periodID)
	ret0, _ := ret[0].(payslip.PayslipSummaryReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayslipSummary indicates an expected call of GetPayslipSummary.
func (mr *MockAdminServiceProviderMockRecorder) GetPayslipSummary(ctx, periodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayslipSummary", reflect.TypeOf((*MockAdminServiceProvider)(nil).GetPayslipSummary), ctx, periodID)
}

// RunPayroll mocks base method.
func (m *MockAdminServiceProvider) RunPayroll(ctx context.Context, periodID, userID, requestID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunPayroll", ctx, periodID, userID, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunPayroll indicates an expected call of RunPayroll.
func (mr *MockAdminServiceProviderMockRecorder) RunPayroll(ctx, periodID, userID, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPayroll", reflect.TypeOf((*MockAdminServiceProvider)(nil).RunPayroll), ctx, periodID, userID, requestID)
}
