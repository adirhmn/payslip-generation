// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthServiceProvider is a mock of AuthServiceProvider interface.
type MockAuthServiceProvider struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceProviderMockRecorder
}

// MockAuthServiceProviderMockRecorder is the mock recorder for MockAuthServiceProvider.
type MockAuthServiceProviderMockRecorder struct {
	mock *MockAuthServiceProvider
}

// NewMockAuthServiceProvider creates a new mock instance.
func NewMockAuthServiceProvider(ctrl *gomock.Controller) *MockAuthServiceProvider {
	mock := &MockAuthServiceProvider{ctrl: ctrl}
	mock.recorder = &MockAuthServiceProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServiceProvider) EXPECT() *MockAuthServiceProviderMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthServiceProvider) Login(ctx context.Context, username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceProviderMockRecorder) Login(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthServiceProvider)(nil).Login), ctx, username, password)
}
