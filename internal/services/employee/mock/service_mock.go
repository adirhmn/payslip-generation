// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	attendance "payslip-generation-system/internal/entity/attendance"
	overtime "payslip-generation-system/internal/entity/overtime"
	payslip "payslip-generation-system/internal/entity/payslip"
	reimbursement "payslip-generation-system/internal/entity/reimbursement"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEmployeeServiceProvider is a mock of EmployeeServiceProvider interface.
type MockEmployeeServiceProvider struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeServiceProviderMockRecorder
}

// MockEmployeeServiceProviderMockRecorder is the mock recorder for MockEmployeeServiceProvider.
type MockEmployeeServiceProviderMockRecorder struct {
	mock *MockEmployeeServiceProvider
}

// NewMockEmployeeServiceProvider creates a new mock instance.
func NewMockEmployeeServiceProvider(ctrl *gomock.Controller) *MockEmployeeServiceProvider {
	mock := &MockEmployeeServiceProvider{ctrl: ctrl}
	mock.recorder = &MockEmployeeServiceProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeeServiceProvider) EXPECT() *MockEmployeeServiceProviderMockRecorder {
	return m.recorder
}

// GeneratePayslips mocks base method.
func (m *MockEmployeeServiceProvider) GeneratePayslips(ctx context.Context, userID int) ([]payslip.Payslip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePayslips", ctx, userID)
	ret0, _ := ret[0].([]payslip.Payslip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePayslips indicates an expected call of GeneratePayslips.
func (mr *MockEmployeeServiceProviderMockRecorder) GeneratePayslips(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePayslips", reflect.TypeOf((*MockEmployeeServiceProvider)(nil).GeneratePayslips), ctx, userID)
}

// SubmitAttendance mocks base method.
func (m *MockEmployeeServiceProvider) SubmitAttendance(ctx context.Context, attendance attendance.Attendance, requestID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitAttendance", ctx, attendance, requestID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitAttendance indicates an expected call of SubmitAttendance.
func (mr *MockEmployeeServiceProviderMockRecorder) SubmitAttendance(ctx, attendance, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitAttendance", reflect.TypeOf((*MockEmployeeServiceProvider)(nil).SubmitAttendance), ctx, attendance, requestID)
}

// SubmitOvertime mocks base method.
func (m *MockEmployeeServiceProvider) SubmitOvertime(ctx context.Context, overtime overtime.Overtime, requestID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitOvertime", ctx, overtime, requestID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitOvertime indicates an expected call of SubmitOvertime.
func (mr *MockEmployeeServiceProviderMockRecorder) SubmitOvertime(ctx, overtime, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitOvertime", reflect.TypeOf((*MockEmployeeServiceProvider)(nil).SubmitOvertime), ctx, overtime, requestID)
}

// SubmitReimbursement mocks base method.
func (m *MockEmployeeServiceProvider) SubmitReimbursement(ctx context.Context, reimbursement reimbursement.Reimbursement, requestID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitReimbursement", ctx, reimbursement, requestID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitReimbursement indicates an expected call of SubmitReimbursement.
func (mr *MockEmployeeServiceProviderMockRecorder) SubmitReimbursement(ctx, reimbursement, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitReimbursement", reflect.TypeOf((*MockEmployeeServiceProvider)(nil).SubmitReimbursement), ctx, reimbursement, requestID)
}
