// Code generated by MockGen. DO NOT EDIT.
// Source: repository_db.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockdbRepoProvider is a mock of dbRepoProvider interface.
type MockdbRepoProvider struct {
	ctrl     *gomock.Controller
	recorder *MockdbRepoProviderMockRecorder
}

// MockdbRepoProviderMockRecorder is the mock recorder for MockdbRepoProvider.
type MockdbRepoProviderMockRecorder struct {
	mock *MockdbRepoProvider
}

// NewMockdbRepoProvider creates a new mock instance.
func NewMockdbRepoProvider(ctrl *gomock.Controller) *MockdbRepoProvider {
	mock := &MockdbRepoProvider{ctrl: ctrl}
	mock.recorder = &MockdbRepoProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdbRepoProvider) EXPECT() *MockdbRepoProviderMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockdbRepoProvider) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockdbRepoProviderMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockdbRepoProvider)(nil).Ping), ctx)
}
