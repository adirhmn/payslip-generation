// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPingRepositoryProvider is a mock of PingRepositoryProvider interface.
type MockPingRepositoryProvider struct {
	ctrl     *gomock.Controller
	recorder *MockPingRepositoryProviderMockRecorder
}

// MockPingRepositoryProviderMockRecorder is the mock recorder for MockPingRepositoryProvider.
type MockPingRepositoryProviderMockRecorder struct {
	mock *MockPingRepositoryProvider
}

// NewMockPingRepositoryProvider creates a new mock instance.
func NewMockPingRepositoryProvider(ctrl *gomock.Controller) *MockPingRepositoryProvider {
	mock := &MockPingRepositoryProvider{ctrl: ctrl}
	mock.recorder = &MockPingRepositoryProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPingRepositoryProvider) EXPECT() *MockPingRepositoryProviderMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockPingRepositoryProvider) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockPingRepositoryProviderMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPingRepositoryProvider)(nil).Ping), ctx)
}
