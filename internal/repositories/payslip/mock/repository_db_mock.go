// Code generated by MockGen. DO NOT EDIT.
// Source: repository_db.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	payslip "payslip-generation-system/internal/entity/payslip"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockdbRepoProvider is a mock of dbRepoProvider interface.
type MockdbRepoProvider struct {
	ctrl     *gomock.Controller
	recorder *MockdbRepoProviderMockRecorder
}

// MockdbRepoProviderMockRecorder is the mock recorder for MockdbRepoProvider.
type MockdbRepoProviderMockRecorder struct {
	mock *MockdbRepoProvider
}

// NewMockdbRepoProvider creates a new mock instance.
func NewMockdbRepoProvider(ctrl *gomock.Controller) *MockdbRepoProvider {
	mock := &MockdbRepoProvider{ctrl: ctrl}
	mock.recorder = &MockdbRepoProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdbRepoProvider) EXPECT() *MockdbRepoProviderMockRecorder {
	return m.recorder
}

// BulkInsertPayslips mocks base method.
func (m *MockdbRepoProvider) BulkInsertPayslips(ctx context.Context, payslips []payslip.Payslip) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkInsertPayslips", ctx, payslips)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkInsertPayslips indicates an expected call of BulkInsertPayslips.
func (mr *MockdbRepoProviderMockRecorder) BulkInsertPayslips(ctx, payslips interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkInsertPayslips", reflect.TypeOf((*MockdbRepoProvider)(nil).BulkInsertPayslips), ctx, payslips)
}

// GetPayslipSummary mocks base method.
func (m *MockdbRepoProvider) GetPayslipSummary(ctx context.Context, periodID int) (payslip.PayslipSummaryReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayslipSummary", ctx, periodID)
	ret0, _ := ret[0].(payslip.PayslipSummaryReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayslipSummary indicates an expected call of GetPayslipSummary.
func (mr *MockdbRepoProviderMockRecorder) GetPayslipSummary(ctx, periodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayslipSummary", reflect.TypeOf((*MockdbRepoProvider)(nil).GetPayslipSummary), ctx, periodID)
}

// GetPayslipsByUserID mocks base method.
func (m *MockdbRepoProvider) GetPayslipsByUserID(ctx context.Context, userID int) ([]payslip.Payslip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayslipsByUserID", ctx, userID)
	ret0, _ := ret[0].([]payslip.Payslip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayslipsByUserID indicates an expected call of GetPayslipsByUserID.
func (mr *MockdbRepoProviderMockRecorder) GetPayslipsByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayslipsByUserID", reflect.TypeOf((*MockdbRepoProvider)(nil).GetPayslipsByUserID), ctx, userID)
}

// PayslipExistsByPeriodID mocks base method.
func (m *MockdbRepoProvider) PayslipExistsByPeriodID(ctx context.Context, periodID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayslipExistsByPeriodID", ctx, periodID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PayslipExistsByPeriodID indicates an expected call of PayslipExistsByPeriodID.
func (mr *MockdbRepoProviderMockRecorder) PayslipExistsByPeriodID(ctx, periodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayslipExistsByPeriodID", reflect.TypeOf((*MockdbRepoProvider)(nil).PayslipExistsByPeriodID), ctx, periodID)
}
