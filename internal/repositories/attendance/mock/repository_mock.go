// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	attendance "payslip-generation-system/internal/entity/attendance"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockAttendanceRepositoryProvider is a mock of AttendanceRepositoryProvider interface.
type MockAttendanceRepositoryProvider struct {
	ctrl     *gomock.Controller
	recorder *MockAttendanceRepositoryProviderMockRecorder
}

// MockAttendanceRepositoryProviderMockRecorder is the mock recorder for MockAttendanceRepositoryProvider.
type MockAttendanceRepositoryProviderMockRecorder struct {
	mock *MockAttendanceRepositoryProvider
}

// NewMockAttendanceRepositoryProvider creates a new mock instance.
func NewMockAttendanceRepositoryProvider(ctrl *gomock.Controller) *MockAttendanceRepositoryProvider {
	mock := &MockAttendanceRepositoryProvider{ctrl: ctrl}
	mock.recorder = &MockAttendanceRepositoryProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttendanceRepositoryProvider) EXPECT() *MockAttendanceRepositoryProviderMockRecorder {
	return m.recorder
}

// GetAttendance mocks base method.
func (m *MockAttendanceRepositoryProvider) GetAttendance(ctx context.Context, userID, periodID int, date time.Time) (attendance.Attendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttendance", ctx, userID, periodID, date)
	ret0, _ := ret[0].(attendance.Attendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttendance indicates an expected call of GetAttendance.
func (mr *MockAttendanceRepositoryProviderMockRecorder) GetAttendance(ctx, userID, periodID, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttendance", reflect.TypeOf((*MockAttendanceRepositoryProvider)(nil).GetAttendance), ctx, userID, periodID, date)
}

// GetAttendancePeriodByID mocks base method.
func (m *MockAttendanceRepositoryProvider) GetAttendancePeriodByID(ctx context.Context, id int) (attendance.AttendancePeriod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttendancePeriodByID", ctx, id)
	ret0, _ := ret[0].(attendance.AttendancePeriod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttendancePeriodByID indicates an expected call of GetAttendancePeriodByID.
func (mr *MockAttendanceRepositoryProviderMockRecorder) GetAttendancePeriodByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttendancePeriodByID", reflect.TypeOf((*MockAttendanceRepositoryProvider)(nil).GetAttendancePeriodByID), ctx, id)
}

// GetEmployeeAttendanceSummary mocks base method.
func (m *MockAttendanceRepositoryProvider) GetEmployeeAttendanceSummary(ctx context.Context, periodID int) ([]attendance.EmployeeAttendanceSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeAttendanceSummary", ctx, periodID)
	ret0, _ := ret[0].([]attendance.EmployeeAttendanceSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeAttendanceSummary indicates an expected call of GetEmployeeAttendanceSummary.
func (mr *MockAttendanceRepositoryProviderMockRecorder) GetEmployeeAttendanceSummary(ctx, periodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeAttendanceSummary", reflect.TypeOf((*MockAttendanceRepositoryProvider)(nil).GetEmployeeAttendanceSummary), ctx, periodID)
}

// InsertAttendance mocks base method.
func (m *MockAttendanceRepositoryProvider) InsertAttendance(ctx context.Context, a attendance.Attendance) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAttendance", ctx, a)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertAttendance indicates an expected call of InsertAttendance.
func (mr *MockAttendanceRepositoryProviderMockRecorder) InsertAttendance(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAttendance", reflect.TypeOf((*MockAttendanceRepositoryProvider)(nil).InsertAttendance), ctx, a)
}

// InsertAttendancePeriod mocks base method.
func (m *MockAttendanceRepositoryProvider) InsertAttendancePeriod(ctx context.Context, attendancePeriod attendance.AttendancePeriod) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAttendancePeriod", ctx, attendancePeriod)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertAttendancePeriod indicates an expected call of InsertAttendancePeriod.
func (mr *MockAttendanceRepositoryProviderMockRecorder) InsertAttendancePeriod(ctx, attendancePeriod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAttendancePeriod", reflect.TypeOf((*MockAttendanceRepositoryProvider)(nil).InsertAttendancePeriod), ctx, attendancePeriod)
}
