// Code generated by MockGen. DO NOT EDIT.
// Source: repository_db.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	attendance "payslip-generation-system/internal/entity/attendance"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockdbRepoProvider is a mock of dbRepoProvider interface.
type MockdbRepoProvider struct {
	ctrl     *gomock.Controller
	recorder *MockdbRepoProviderMockRecorder
}

// MockdbRepoProviderMockRecorder is the mock recorder for MockdbRepoProvider.
type MockdbRepoProviderMockRecorder struct {
	mock *MockdbRepoProvider
}

// NewMockdbRepoProvider creates a new mock instance.
func NewMockdbRepoProvider(ctrl *gomock.Controller) *MockdbRepoProvider {
	mock := &MockdbRepoProvider{ctrl: ctrl}
	mock.recorder = &MockdbRepoProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdbRepoProvider) EXPECT() *MockdbRepoProviderMockRecorder {
	return m.recorder
}

// GetAttendance mocks base method.
func (m *MockdbRepoProvider) GetAttendance(ctx context.Context, userID, periodID int, date time.Time) (attendance.Attendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttendance", ctx, userID, periodID, date)
	ret0, _ := ret[0].(attendance.Attendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttendance indicates an expected call of GetAttendance.
func (mr *MockdbRepoProviderMockRecorder) GetAttendance(ctx, userID, periodID, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttendance", reflect.TypeOf((*MockdbRepoProvider)(nil).GetAttendance), ctx, userID, periodID, date)
}

// GetAttendancePeriodByID mocks base method.
func (m *MockdbRepoProvider) GetAttendancePeriodByID(ctx context.Context, id int) (attendance.AttendancePeriod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttendancePeriodByID", ctx, id)
	ret0, _ := ret[0].(attendance.AttendancePeriod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttendancePeriodByID indicates an expected call of GetAttendancePeriodByID.
func (mr *MockdbRepoProviderMockRecorder) GetAttendancePeriodByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttendancePeriodByID", reflect.TypeOf((*MockdbRepoProvider)(nil).GetAttendancePeriodByID), ctx, id)
}

// GetEmployeeAttendanceSummary mocks base method.
func (m *MockdbRepoProvider) GetEmployeeAttendanceSummary(ctx context.Context, periodID int) ([]attendance.EmployeeAttendanceSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeAttendanceSummary", ctx, periodID)
	ret0, _ := ret[0].([]attendance.EmployeeAttendanceSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeAttendanceSummary indicates an expected call of GetEmployeeAttendanceSummary.
func (mr *MockdbRepoProviderMockRecorder) GetEmployeeAttendanceSummary(ctx, periodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeAttendanceSummary", reflect.TypeOf((*MockdbRepoProvider)(nil).GetEmployeeAttendanceSummary), ctx, periodID)
}

// InsertAttendance mocks base method.
func (m *MockdbRepoProvider) InsertAttendance(ctx context.Context, attendance attendance.Attendance) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAttendance", ctx, attendance)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertAttendance indicates an expected call of InsertAttendance.
func (mr *MockdbRepoProviderMockRecorder) InsertAttendance(ctx, attendance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAttendance", reflect.TypeOf((*MockdbRepoProvider)(nil).InsertAttendance), ctx, attendance)
}

// InsertAttendancePeriod mocks base method.
func (m *MockdbRepoProvider) InsertAttendancePeriod(ctx context.Context, attendancePeriod attendance.AttendancePeriod) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAttendancePeriod", ctx, attendancePeriod)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertAttendancePeriod indicates an expected call of InsertAttendancePeriod.
func (mr *MockdbRepoProviderMockRecorder) InsertAttendancePeriod(ctx, attendancePeriod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAttendancePeriod", reflect.TypeOf((*MockdbRepoProvider)(nil).InsertAttendancePeriod), ctx, attendancePeriod)
}
