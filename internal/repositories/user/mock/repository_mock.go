// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	auth "payslip-generation-system/internal/entity/user"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepositoryProvider is a mock of UserRepositoryProvider interface.
type MockUserRepositoryProvider struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryProviderMockRecorder
}

// MockUserRepositoryProviderMockRecorder is the mock recorder for MockUserRepositoryProvider.
type MockUserRepositoryProviderMockRecorder struct {
	mock *MockUserRepositoryProvider
}

// NewMockUserRepositoryProvider creates a new mock instance.
func NewMockUserRepositoryProvider(ctrl *gomock.Controller) *MockUserRepositoryProvider {
	mock := &MockUserRepositoryProvider{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryProvider) EXPECT() *MockUserRepositoryProviderMockRecorder {
	return m.recorder
}

// GetAllEmployees mocks base method.
func (m *MockUserRepositoryProvider) GetAllEmployees(ctx context.Context) ([]auth.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEmployees", ctx)
	ret0, _ := ret[0].([]auth.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEmployees indicates an expected call of GetAllEmployees.
func (mr *MockUserRepositoryProviderMockRecorder) GetAllEmployees(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEmployees", reflect.TypeOf((*MockUserRepositoryProvider)(nil).GetAllEmployees), ctx)
}

// GetUserByUsername mocks base method.
func (m *MockUserRepositoryProvider) GetUserByUsername(ctx context.Context, username string) (auth.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(auth.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUserRepositoryProviderMockRecorder) GetUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUserRepositoryProvider)(nil).GetUserByUsername), ctx, username)
}
